/* Interface */
#define function checkPassword(address,bytes32) nonpayable returns (bytes32)

/* Methods */
#define macro CHECK_PASSWORD() = takes (0) returns (5) {
    0x04 calldataload           // [password]

    // XOR with secret key      
    0x98                        // [length, plaintext]
    0x6b35340a 0x60 mstore      // [length, plaintext]
    0x20 0x60 sha3              // [hash, length, plaintext]
    swap1 shl xor               // [xoredPlaintext]

    0x24 calldataload           // [secretAddr, password]

    // Store function signature in memory
    0x66fbf07e 0x20 mstore

    // Retrieve password from external contract
    0x20 0x00 0x04 0x3C dup5 gas delegatecall

    pop 0x00 mload              // [secret, secretAddr, password]

    // Push itercount and correctCount to the stack
    0x00 0x00                   // [correctCount, itercount, secret, secretAddr, password]

    iterativeCheck:
        dup3 dup3 byte          // [secretNth, correctCount, itercount, secret, secretAddr, password]
        dup6 dup4 byte          // [flagNth, secretNth, correctCount, itercount, secret, secretAddr, password]
        eq correctChar jumpi    // [correctCount, itercount, secret, secretAddr, password]

    iterativeCheckAfterJump:
        swap1 0x01 add          // [itercount++, correctCount, secret, secretAddr, password]
        dup1 0x0D eq end jumpi  // [itercount, correctCount, secret, secretAddr, password]
        swap1                   // [correctCount, itercount, secret, secretAddr, password]
        iterativeCheck jump

    correctChar:
        0x01 add                // [correctCount++, itercount, secret, secretAddr, password]
        iterativeCheckAfterJump jump

    end:
        dup2 0x0D eq            // [correct?, itercount, correctCount, secret, secretAddr, password]
        0x40 mstore             // [itercount, correctCount, secret, secretAddr, password]
    
    0x20 0x40 return
}

#define macro MAIN() = takes (0) returns (1) {
    // Check for flag format
    0x00 calldataload           // ["TISC{###########}"]
    
    dup1 0xD8 shr               // ["TISC{", "TISC{###########}"]
    0x544953437B eq             // [1, "TISC{###########}"]
    dup2 0x80 shl 0xF8 shr      // ["}", 1, "TISC{###########}"]
    0x7D eq                     // [1, 1, "TISC{###########}"]
    add 0x02 eq checkPassword jumpi

    0x00 0x00 revert

    checkPassword:
        CHECK_PASSWORD()
}